#
# # Copyright Â© 2023 Peak AI Limited. or its affiliates. All Rights Reserved.
# #
# # Licensed under the Apache License, Version 2.0 (the "License"). You
# # may not use this file except in compliance with the License. A copy of
# # the License is located at:
# #
# # https://github.com/PeakBI/peak-sdk/blob/main/LICENSE
# #
# # or in the "license" file accompanying this file. This file is
# # distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# # ANY KIND, either express or implied. See the License for the specific
# # language governing permissions and limitations under the License.
# #
# # This file is part of the peak-sdk.
# # see (https://github.com/PeakBI/peak-sdk)
# #
# # You should have received a copy of the APACHE LICENSE, VERSION 2.0
# # along with this program. If not, see <https://apache.org/licenses/LICENSE-2.0>
#
"""Log Writer Module."""

from __future__ import annotations

import contextlib
from typing import Any

from rich.console import Console, PagerContext
from rich.highlighter import JSONHighlighter

from peak import config

console = Console()
json_highlighter = JSONHighlighter()


class Writer:
    """The Writer class used to print out data in the CLI."""

    def __init__(self, *, ignore_debug_mode: bool = False) -> None:
        """Initialise the write class.

        Args:
            ignore_debug_mode (bool): don't consider debug mode and print the output anyways.
        """
        self.ignore_debug_mode = ignore_debug_mode

    def write(self, *args: Any) -> None:
        """Write logs to the terminal.

        Args:
            args (List[Any]): list of data to be printed on the terminal.
                This handles dry-run, debug mode and exit code for the CLI.
        """
        if not config.DEBUG_MODE or self.ignore_debug_mode:
            self.__print(*args)

    def __print(self, *args: Any) -> None:
        """Write logs to the terminal.

        Args:
            args (List[Any]): list of data to be printed on the terminal.
        """
        console.print(*args)

    def pager(self) -> PagerContext | contextlib.nullcontext[None]:
        """Returns a Pager context manager."""
        if config.ENABLE_PAGING:
            return console.pager(styles=True)
        return contextlib.nullcontext()
